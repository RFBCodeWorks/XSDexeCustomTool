
// ------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by XSDCustomTool VisualStudio Extension.
//    This file is only generated if it is missing, so it is safe to modify this file as needed.
//    If the file is renamed or deleted, then it will be regenerated the next time the custom tool is run.
//    The base file contains the Load(string), Save(string) methods, several constructors,
//    and several properties to work with the class file generated by XSD.exe.
// </auto-generated>
// ------------------------------------------------------------------------------
// 
//
namespace XSDCustomToolVSIX.Example_Files {
    
    
    /// <summary>
    /// Partial Class XSDCustomTool_Parameters generated by XSD.exe
    /// </summary>
    public partial class XSDCustomTool_Parameters {
        
        // <summary> Parameterless Constructor </summary>
        public XSDCustomTool_Parameters() {
            // TO DO: assign values for all the properties
            XSDexeOptions = new XSDCustomTool_ParametersXSDexeOptions();
            ElementsToGenerateCodeFor = new string[0];
        }
        
        #region < ShouldSerializeProperty >
        // 
        //
        // ShouldSerialize is run  by the XML Serializer against properties to determine whether to write them to disk.
        //
        // The Default functionality (without this method) is to only serialize if the value is changed from the default.
        //
        // These methods override that functionality, allowing the programmer to decide when they are serialized.
        //
        // To restore original functionality (allowing Serializer to decide for each parameter), comment out these methods.
        //
        // 
        //
        
        /// <summary>Determine when the <see cref="XSDexeOptions"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeXSDexeOptions() => true;
        
        /// <summary>Determine when the <see cref="ElementsToGenerateCodeFor"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeElementsToGenerateCodeFor() => true;
        
        #endregion
    }
    
    /// <summary>
    /// Partial Class XSDCustomTool_ParametersXSDexeOptions generated by XSD.exe
    /// </summary>
    public partial class XSDCustomTool_ParametersXSDexeOptions {
        
        // <summary> Parameterless Constructor </summary>
        public XSDCustomTool_ParametersXSDexeOptions() {
            // TO DO: assign values for all the properties
            NameSpace = "";
            Language = XSDCustomTool_ParametersXSDexeOptionsLanguage.CS;
            LanguageSpecified = false;
            NoLogo = false;
            NoLogoSpecified = false;
            GenerateClass = false;
            ClassOptions = new XSDCustomTool_ParametersXSDexeOptionsClassOptions();
            DataSetOptions = new XSDCustomTool_ParametersXSDexeOptionsDataSetOptions();
        }
        
        #region < ShouldSerializeProperty >
        // 
        //
        // ShouldSerialize is run  by the XML Serializer against properties to determine whether to write them to disk.
        //
        // The Default functionality (without this method) is to only serialize if the value is changed from the default.
        //
        // These methods override that functionality, allowing the programmer to decide when they are serialized.
        //
        // To restore original functionality (allowing Serializer to decide for each parameter), comment out these methods.
        //
        // 
        //
        
        /// <summary>Determine when the <see cref="NameSpace"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeNameSpace() => true;
        
        /// <summary>Determine when the <see cref="Language"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeLanguage() => true;
        
        /// <summary>Determine when the <see cref="NoLogo"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeNoLogo() => true;
        
        /// <summary>Determine when the <see cref="GenerateClass"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeGenerateClass() => true;
        
        /// <summary>Determine when the <see cref="ClassOptions"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeClassOptions() => true;
        
        /// <summary>Determine when the <see cref="DataSetOptions"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeDataSetOptions() => true;
        
        #endregion
    }
    
    /// <summary>
    /// Partial Class XSDCustomTool_ParametersXSDexeOptionsClassOptions generated by XSD.exe
    /// </summary>
    public partial class XSDCustomTool_ParametersXSDexeOptionsClassOptions {
        
        // <summary> Parameterless Constructor </summary>
        public XSDCustomTool_ParametersXSDexeOptionsClassOptions() {
            // TO DO: assign values for all the properties
            PropertiesInsteadOfFields = false;
            PropertiesInsteadOfFieldsSpecified = false;
            Order = false;
            OrderSpecified = false;
            EnableDataBinding = false;
            EnableDataBindingSpecified = false;
        }
        
        #region < ShouldSerializeProperty >
        // 
        //
        // ShouldSerialize is run  by the XML Serializer against properties to determine whether to write them to disk.
        //
        // The Default functionality (without this method) is to only serialize if the value is changed from the default.
        //
        // These methods override that functionality, allowing the programmer to decide when they are serialized.
        //
        // To restore original functionality (allowing Serializer to decide for each parameter), comment out these methods.
        //
        // 
        //
        
        /// <summary>Determine when the <see cref="PropertiesInsteadOfFields"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializePropertiesInsteadOfFields() => true;
        
        /// <summary>Determine when the <see cref="Order"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeOrder() => true;
        
        /// <summary>Determine when the <see cref="EnableDataBinding"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeEnableDataBinding() => true;
        
        #endregion
    }
    
    /// <summary>
    /// Partial Class XSDCustomTool_ParametersXSDexeOptionsDataSetOptions generated by XSD.exe
    /// </summary>
    public partial class XSDCustomTool_ParametersXSDexeOptionsDataSetOptions {
        
        // <summary> Parameterless Constructor </summary>
        public XSDCustomTool_ParametersXSDexeOptionsDataSetOptions() {
            // TO DO: assign values for all the properties
            EnableLinqDataSet = false;
            EnableLinqDataSetSpecified = false;
        }
        
        #region < ShouldSerializeProperty >
        // 
        //
        // ShouldSerialize is run  by the XML Serializer against properties to determine whether to write them to disk.
        //
        // The Default functionality (without this method) is to only serialize if the value is changed from the default.
        //
        // These methods override that functionality, allowing the programmer to decide when they are serialized.
        //
        // To restore original functionality (allowing Serializer to decide for each parameter), comment out these methods.
        //
        // 
        //
        
        /// <summary>Determine when the <see cref="EnableLinqDataSet"/> property is written to disk during XML Serialization</summary>
        private bool ShouldSerializeEnableLinqDataSet() => true;
        
        #endregion
    }
}
