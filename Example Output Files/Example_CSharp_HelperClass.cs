using System;
using System.IO;
using System.Xml.Serialization;

// ------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by XSDCustomTool VisualStudio Extension.
//    This file is only generated if it is missing, so it is safe to modify this file as needed.
//    If the file is renamed or deleted, then it will be regenerated the next time the custom tool is run.
//    The base file contains the Load(string), Save(string) methods, several constructors,
//    and several properties to work with the class file generated by XSD.exe.
// </auto-generated>
// ------------------------------------------------------------------------------
// 
//
namespace XSDCustomToolVSIX.Example_Files {
    
    
    /// <summary>
    /// Helper class to ease working with ParameterFile.xsd autogenerated class
    /// </summary>
    internal partial class ParameterFile_HelperClass {
        
        #region < Constructors >
        
        /// <summary> Construct a new instance of the ParameterFile_HelperClass object. </summary>
        public ParameterFile_HelperClass() {
            // TO DO: assign values for all the properties
            this.XSDCustomTool_Parameters = new XSDCustomTool_Parameters();
        }
        
        /// <summary> Construct a new instance of the ParameterFile_HelperClass object by Deserializing an XML file. </summary>
        /// <param name="FilePath"> This XML file to read into the class object </param>
        public ParameterFile_HelperClass(string FilePath) {
            this.XSDCustomTool_Parameters = LoadXmlFile(FilePath);
        }
        
        /// <summary> Construct a new instance of the ParameterFile_HelperClass object from an existing <typeparamref name="XSDCustomTool_Parameters"/> object. </summary>
        /// <param name="xSDCustomTool_Parameters"> A pre-existing <typeparamref name="XSDCustomTool_Parameters"/> object.</param>
        public ParameterFile_HelperClass(XSDCustomTool_Parameters xSDCustomTool_Parameters) {
            this.XSDCustomTool_Parameters = xSDCustomTool_Parameters;
        }
        
        #endregion
        
        #region < Properties >
        
        /// <summary>This Property Represents the <see cref="XSDCustomTool_Parameters"/> XML Object Class</summary>
        public XSDCustomTool_Parameters XSDCustomTool_Parameters { get; set; }
        
        #endregion
        
        #region < Saving & Loading XML Files >
        
        ///  <summary>
        ///  Load a file path and produce a Deserialized <typeparamref name="XSDCustomTool_Parameters"/> Object
        ///  </summary>
        ///  <remarks>This code was generated by XSDCustomTool VisualStudio Extension.</remarks>
        ///  <param name="FilePath"> This XML file to read into the class object </param>
        ///  <returns> A new <typeparamref name="XSDCustomTool_Parameters"/> object </returns>
        private XSDCustomTool_Parameters LoadXmlFile(string FilePath) {
            XSDCustomTool_Parameters retObj = null;
            try
            {
                using (Stream stream = File.Open(FilePath, FileMode.Open))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(XSDCustomTool_Parameters));
                    retObj = (XSDCustomTool_Parameters)serializer.Deserialize(stream);
                }
            }
            catch (Exception E)
            {
                 throw E;
            }
            return retObj;
        }
        
        ///  <summary>
        ///  This method will take the XSDCustomTool_Parameters object, create an XML serializer for it, and write the XML to the <paramref name = "FilePath" />
        ///  </summary>
        ///  <remarks>This code was generated by XSDCustomTool VisualStudio Extension.</remarks>
        ///  <param name="FilePath"> Destination file path to save the file into. </param>
        private void SaveXMLFile(string FilePath) {
            try
            {
                Directory.CreateDirectory(new FileInfo(FilePath).DirectoryName);
                using (Stream stream = File.Open(FilePath, FileMode.Create))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(XSDCustomTool_Parameters));
                    serializer.Serialize(stream, this.XSDCustomTool_Parameters);
                    stream.Flush();
                }
            }
            catch (Exception E)
            {
                 throw E;
            }
        }
        
        #endregion
    }
}
