<?xml version="1.0" encoding="utf-8" ?>
<XsdCustomTool_HelpFile>
    <!-- 
	This XML file is meant to act as a help guide for working with the XSDCustomTool extension.
    
    XSDCustomTool generates [filename]_Parameters.xml when it runs (unless this is disabled by user settings under the options menu). 
	    
    Please report any issues here. Help is needed to implement functionality for JS, VB, and J# languages (which are all already supported by XSD.exe).
    https://github.com/RFBomb/XSDexeCustomTool
        
    Files output by the CustomTool:
    - this help file
    - [InputFileName]_parameters.xml              <This is the parameter file that gets fed into XSD.exe when generating the output class.>
    - [InputFileName]_Class.[languageExtension]   <Example> InputFile_Class.cs </Example>
    
    This "_parameters.xml" file will be used when the extension runs XSD.exe as a way to pass parameters into the extension to determine how it writes the output class / dataset. 
	Customize this file as needed for generating the Class / Dataset you desire. 
	
    Important Notes:
    
	 - Warning! : Do not use the 'output' or 'help' attributes within the <xsd> element. They will cause the extension to error out by placing the file in an unexpected location.
     - The XSDexeCustomTool was designed for XSD files that are contained within a single file, so at this time specifying additional files using the <schema> tag is unsupported. Use at your own risk.

    For more info, see: https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-schema-definition-tool-xsd-exe
    -->

<!-- IMPORTANT INFORMATION:
        MICROSOFT REALLY FUCKED UP ON THIS ONE.

        <generateClasses language='CS' namespace='Example.NameSpace' properties='true' order='false' enableDataBinding='true' > IS INVALID
		<generateClasses language="CS"  namespace="ClassLibrary1" options="properties"/> IS CORRECT.
		
		This means that MS only allows you to use a SINGLE OPTION when generating the output classes. Which is absurd, because that means that the parameter files are gimped from the get-go.
		
		Solution: Create my own XSD parameter file with cocaine and hookers. I mean with boolean values as shown below. Load it in, evaluate it, then pass it in via command prompt.
		Why the fuck did this have to be so complicated.
-->

    <!-- Generating a Class file (this is also what MSDataSetGenerator creates, which is the default CustomTool assigned to XSD files by VisualStudio) -->
    <xsd nologo='false'>
        <!-- language:  CS (C#, the default), VB (Visual Basic), JS (JScript), or VJS (Visual J#). -->
        <!-- namespace: Specifies the namespace for the generated code. The namespace must conform to CLR standards (for example, no spaces or backslash characters). -->
        <!-- properties:		(true/false) Set true to use Class Properties, set false to use Public Fields instead. -->
        <!-- order:				(true/false) Generates explicit order identifiers on all particle members. -->
        <!-- enableDataBinding: (true/false) Implements the INotifyPropertyChanged interface on all generated types to enable data binding. -->
        <generateClasses language='CS' namespace='Example.NameSpace' properties='true' order='false' enableDataBinding='true' >
			<!-- Use the <element>YourElementHere</element> tag to specify the element(s) to generate code for. -->
			<element>SomeElement</element>
            <element>SomeOtherElement</element>
        </generateClasses>
    </xsd>
    
    <!-- Generating a DataSet file (this is also what MSDataSetGenerator creates, which is the default CustomTool assigned to XSD files by VisualStudio) -->
    <xsd xmlns='http://microsoft.com/dotnet/tools/xsd/' nologo='false'>
        <!-- language:  CS (C#, the default), VB (Visual Basic), JS (JScript), or VJS (Visual J#). -->
        <!-- namespace: Specifies the namespace for the generated code. The namespace must conform to CLR standards (for example, no spaces or backslash characters). -->
        <!-- enableLinqDataSet: (true/false) Specifies that the generated DataSet can be queried against using LINQ to DataSet. The default value is false. -->
        <generateDataSet language='VB' namespace='Microsoft.Serialization.Examples' enableLinqDataSet='false'/>
    </xsd>

</XsdCustomTool_HelpFile>