using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.CodeDom;
using System.CodeDom.Compiler;

namespace XSDCustomToolVSIX.Generate_Helpers
{
    /// <summary> This represents a class that was discovered when evaluting the output file from XSD.exe </summary>
    internal class DiscoveredClass
    {
        private DiscoveredClass() { }

        public DiscoveredClass(CodeTypeDeclaration ClassDeclaration)
        {
            this.ParsedClass = ClassDeclaration;
            List<CodeMemberField> Fields = ParsedClass.Members.OfType<CodeMemberField>().ToList();
            bool HasProperties = ParsedClass.Members.OfType<CodeMemberProperty>().Count() > 0;
            foreach (CodeTypeMember member in ParsedClass.Members)
            {
                switch (true)
                {
                    case true when member.GetType() == typeof(CodeMemberProperty):
                        //Add the Property to the ClassProperty list
                        ClassProperties.Add(new DiscoveredProperty((CodeMemberProperty)member,null));
                        break;
                    case true when !HasProperties && member.GetType() == typeof(CodeMemberField):
                        //Add the Field to the ClassProperty list, since it should be a public field
                        ClassProperties.Add(new DiscoveredProperty(null, (CodeMemberField)member));
                        break;
                    case true when member.GetType() == typeof(CodeMemberMethod):
                        //Currently Ignored
                        break;
                    case true when member.GetType() == typeof(CodeMemberEvent):
                        //Currently Ignored
                        break;
                    default: //Ignore (shouldn't occur)
                        break;
                }
            }
        }

        /// <inheritdoc cref="CodeTypeDeclaration" />
        internal protected CodeTypeDeclaration ParsedClass { get; }

        #region < Properties >

        internal bool IsTopLevelNode { get; }

        /// <summary>Reference to the ParseFile object this DiscoveredClass was generated from</summary>
        internal ParsedFile ParsedFile { get; }

        /// <summary> This is the name of the class (the 'type' of the class.)</summary>
        public string ClassName => ParsedClass.Name;

        /// <summary> Any properties discovered while parsing the class will be listed here. </summary>
        public List<DiscoveredProperty> ClassProperties { get; } = new List<DiscoveredProperty>();

        /// <summary>If an autogenerated constructor was found during parsing, this value will be true</summary>
        internal bool HasConstructor => HasInstanceConstructor || HasStaticConstructor;

        private bool HasInstanceConstructor => ParsedClass.Members.OfType<CodeConstructor>().Count() > 0;
        private bool HasStaticConstructor => ParsedClass.Members.OfType<CodeTypeConstructor>().Count() > 0;

        #endregion </ Properties >

        /// <summary> This is the name of the property within the Helper class. </summary>
        /// <returns>Base property returns the <see cref="DiscoveredClass.ClassName"/></returns>
        public virtual string HelperClass_PropertyName => this.ClassName;

        #region < CodeDom >

        /// <summary>Returns new CodeTypeReference object for this class</summary>
        /// <returns></returns>
        public CodeTypeReference GetCodeTypeReference() => new CodeTypeReference(this.ClassName);

        /// <summary>Get the object that represents this class as a property of within the HelperClass</summary>
        /// <param name="IsPublic">set TRUE to return a Public Property, set FALSE to return a Private property</param>
        /// <returns>for C#: "{Public/Private} {ClassName} {PropertyName} {get;set;}"</returns>
        internal CodeMemberProperty GetHelperClassProperty(bool IsPublic = true)
        {
            CodeMemberProperty tmp = new CodeMemberProperty();
            tmp.Attributes = IsPublic ? MemberAttributes.Public : MemberAttributes.Private;
            tmp.Comments.Add("<summary>  </summary>");
            tmp.HasGet = true;
            tmp.HasSet = true;
            tmp.Type = GetCodeTypeReference();
            tmp.Name = this.HelperClass_PropertyName;
            return tmp;
        }

        #endregion </ CodeDom >

        /// <summary>Get the string that for the parameterless constructor that initializes all properties. <br/>
        /// This will be used when building the Supplement File if [<c><see cref="DiscoveredClass.ContainsParameterLessConstructor"/></c>] is false</summary>
        /// <param name="BaseIndentLevel"></param>
        /// <returns> Class() {} </returns>
        //internal abstract string GetConstructor(int BaseIndentLevel);

        
    }
}
