using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XSDCustomToolVSIX.Generate_Helpers
{
    internal abstract class HelperClass : CodeGenerator_Base
    {

        protected HelperClass(ParsedFile parsedFile) : base(parsedFile) { }

        #region < Properties >

        /// <summary> Location of the _HelperClass file on disk. </summary>
        public override FileInfo FileOnDisk => new FileInfo(ParsedFile.xSD_Instance.InputFile.FullName.Replace(".xsd", $"_HelperClass{ParsedFile.OutputFileExtension}"));

        /// <summary> Name of the output class when generating the helper file. </summary>
        public virtual string OutputClassName => this.ParsedFile.xSD_Instance.InputFile.Name.Replace(".xsd", "_HelperClass");

        #endregion </ Properties >

        #region < Abstract Methods >

        /// <summary>
        /// Parse the file generated by XSD.exe and generate a new file. <br/>
        /// This should start by calling base.ReadInClassFile(), then generate the required code, and finally end with base.Save();
        /// </summary>
        public abstract void Generate();

        protected abstract string GenerateConstructors(int BaseIndentLevel);

        /// <summary> Generate a Load(string) method to deserialize an XML file into this helper class. </summary>
        /// <returns></returns>
        protected abstract string GetClassLoaderMethod(int BaseIndentLevel);

        /// <summary> Generate a Save(string) method to serialize an XML file from this class. </summary>
        /// <returns></returns>
        protected abstract string GetClassSaverMethod(int BaseIndentLevel);

        #endregion </ Abstract Methods >

        #region < Methods >

        /// <summary>Generates the comment header of the file that says the file was automatically generated and when it will be overwritten.</summary>
        /// <returns>There are 3 Environment.NewLine keys inserted at the end of this comment.</returns>
        protected virtual string GetComment_AutoGen()
        {
            string FileText = "";
            FileText += $"{CommentIndicator}------------------------------------------------------------------------------{NL}";
            FileText += $"{CommentIndicator} <auto-generated>{NL}";
            FileText += $"{CommentIndicator}     This code was generated by XSDCustomTool VisualStudio Extension.{NL}";
            FileText += $"{CommentIndicator}     This file is only generated if it is missing, so it is safe to modify this file as needed.{NL}";
            FileText += $"{CommentIndicator}     If the file is renamed or deleted, then it will be regenerated the next time the custom tool is run.{NL}";
            FileText += $"{CommentIndicator}     The base file contains the Load(string), Save(string) methods, several constructors, {NL}";
            FileText += $"{CommentIndicator}     and several properties to work with the class file generated by XSD.exe.{NL}";
            FileText += $"{CommentIndicator} </auto-generated>{NL}";
            FileText += $"{CommentIndicator}------------------------------------------------------------------------------{NL}";
            FileText += $"{NL}{NL}";
            return FileText;
        }

        /// <summary>Get the comment for the Save(string) method.</summary>
        /// <returns></returns>
        protected virtual string GetComment_SaveMethod(int BaseIndentLevel)
        {
            return String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} < summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} This method will take the {ParsedFile.TopLevelClass.ClassName} object, create an XML serializer for it, and write the XML to the <paramref name = \"FilePath\" />{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} </summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} <param name=\"FilePath\"> Destination file path to save the file into. </param>{NL}"
                );
        }

        protected virtual string GetComment_LoadMethod(int BaseIndentLevel)
        {
            return String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} <summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} Load a file path and produce a Deserialized <typeparamref name=\"{ParsedFile.TopLevelClass.ClassName}\"/> Object{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} </summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} <param name=\"FilePath\"> This XML file to read into the class object </param>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{SummaryIndicator} <returns> A new <typeparamref name=\"{ParsedFile.TopLevelClass.ClassName}\"/> object </returns>{NL}"
                );
        }

        #endregion </ Methods >

    }
}
