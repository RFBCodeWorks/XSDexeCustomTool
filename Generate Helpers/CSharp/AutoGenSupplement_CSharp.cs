using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XSDCustomToolVSIX.Generate_Helpers.CSharp
{
    internal class AutoGenSupplement_CSharp : AutoGenSupplement
    {
        internal AutoGenSupplement_CSharp(ParsedFile parsedFile) : base(parsedFile) { }

        public override void Generate()
        {
            string txt = "";
            string region;
            txt += $"using System;{NL}";
            txt += $"using System.IO;{NL}";
            txt += $"using System.Xml.Serialization;{NL}{NL}";
            txt += base.GetComment_AutoGen();
            txt += $"namespace {this.NameSpace} {{{NL}{NL}"; // NameSpace Start
            foreach (DiscoveredClass_CSharp cls in ParsedFile.DiscoveredClasses)
            {
                //Process Inner Classes / Properties
                string Ser = ""; //Hold the ShouldSerialize Methods
                string classProps = ""; //Hold properties for the parameterless constructor
                //Process class properties to create strings for later use
                foreach (DiscoveredProperty prop in cls.ClassProperties)
                {
                    //ShouldSerialize -> Classes rely on their properties to determine serialization, so only process non-class properties.
                    if (prop.IsSerializable)
                    {
                        if (Ser != "") Ser += $"{NL}";
                        Ser += ShouldSerializeProperty(prop.Name, 2);
                    }
                    //Create Parameterless Constructor if one is not present
                    if (!cls.ContainsParameterLessConstructor && prop.IsSerializable)
                    {
                        string CST;
                        switch (prop.Type.ToLower())
                        {
                            case "string": CST = "String.Empty;"; break;
                            case "bool": CST = "false;"; break;
                            default:
                                if (prop.Type.Contains("[]"))
                                    CST = $"new {prop.Type}{{}};"; //Array
                                else
                                    CST = $"new {prop.Type}();"; //Assume Class
                                break;
                        }
                        classProps += $"{TabLevel(3)}{prop.Name} = {CST}{NL}";
                    }
                }

                //Start the class
                region = String.Concat(
                $"{TabLevel(1)}/// <summary>{NL}",
                $"{TabLevel(1)}/// Partial Class {cls.ClassName} generated by XSD.exe{NL}",
                $"{TabLevel(1)}/// </summary>{NL}",
                $"{TabLevel(1)}public partial class {cls.ClassName}{NL}", // Class Start
                $"{TabLevel(1)}{{{NL}");
                if (!cls.ContainsParameterLessConstructor)
                {
                    region = String.Concat(region,
                        $"{TabLevel(2)}public {cls.ClassName}(){NL}",   //Constructor Start
                        $"{TabLevel(2)}{{{NL}",
                        $"{TabLevel(3)}// TO DO: assign values for all the properties{NL}",
                        $"{classProps}",
                        $"{TabLevel(2)}}}{NL}");//Constructor End
                }
                else
                    region += $"{TabLevel(2)}//AutoGenerated File already has parameterless constructor.{NL}";

                region += $"{NL}";
                Ser = String.IsNullOrWhiteSpace(Ser) ? 
                    String.Empty :
                    RegionWrap(GetComment_ShouldSerialize(2) + Ser + $"{NL}", "ShouldSerializeProperty", 2);
                region += Ser;
                region += $"{TabLevel(1)}}}{NL}{NL}";//Class End Bracket
                txt += RegionWrap(region, "Partial Class " + cls.ClassName, 1);
            }
            txt += "}"; //NameSpace End
            base.Save(txt);
        }

        private string ShouldSerializeProperty(string PropName, int IndentLevel)
            => String.Concat(
                $"{TabLevel(IndentLevel)}/// <summary>Determine when the <see cref=\"{PropName}\"/> property is written to disk during XML Serialization</summary>{NL}",
                $"{TabLevel(IndentLevel)}private bool ShouldSerialize{PropName}() => true;{NL}");

    }
}
