using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XSDCustomToolVSIX.Generate_Helpers.CSharp
{
    internal class HelperClass_CSharp : HelperClass
    {
        internal HelperClass_CSharp(ParsedFile parsedFile) : base(parsedFile) { }

        public override void Generate()
        {
            string txt = "";
            txt += $"using System;{NL}";
            txt += $"using System.IO;{NL}";
            txt += $"using System.Xml.Serialization;{NL}{NL}";
            txt += base.GetComment_AutoGen();
            txt += $"namespace {this.NameSpace} {{{NL}{NL}"; // NameSpace
            txt += $"{TabLevel(1)}/// <summary>Helper class to ease working with {this.XSDInstance.InputFile.Name} autogenerated {(IsGeneratingClass ? "class" : "dataset")}</summary>{NL}";
            txt += $"{TabLevel(1)}public partial class {this.OutputClassName} {{{NL}{NL}";
            txt += RegionWrap(GenerateConstructors(2), "Constructors", 2);
            txt += RegionWrap(GenerateProperties(2), "Properties", 2);
            txt += RegionWrap(GetClassLoaderMethod(2) + GetClassSaverMethod(2), "Saving & Loading XML Files", 2);
            txt += $"{TabLevel(1)}}}{NL}"; // Close out the class 
            txt += $"}}"; // Close out the namespace
            //Write to file
            base.Save(txt);
        }

        /// <summary></summary>
        /// <param name="BaseIndentLevel"></param>
        /// <returns></returns>
        protected override string GenerateConstructors(int BaseIndentLevel)
        {
            string NoArgs = String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}/// <summary> Construct a new instance of the {OutputClassName} object. </summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}public {OutputClassName}(){NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{{{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel + 1)} // TO DO: assign values for all the properties{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}}}{NL}{NL}"
                );

            string FilePathArg = String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}/// <summary> Construct a new instance of the {OutputClassName} object by Deserializing an XML file. </summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}/// <param name=\"FilePath\"> This XML file to read into the class object </param>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}public {OutputClassName}(string FilePath){NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{{{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel + 1)} {TopLevelClass?.HelperClass_PropertyName ?? "FAULT"} = Load(FilePath);{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}}}{NL}{NL}"
                );

            string DeserializedXML = String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}/// <summary> Construct a new instance of the {OutputClassName} object from an existing <typeparamref name=\"{TopLevelClass.ClassName}\"/> object. </summary>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}/// <param name=\"{TopLevelClass.HelperClass_PropertyName.ToLower()}\"> A pre-existing <typeparamref name=\"{TopLevelClass.ClassName}\"/> object.</param>{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}public {OutputClassName}({TopLevelClass.ClassName} {TopLevelClass.HelperClass_PropertyName.ToLower()}){NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}{{{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel + 1)} {TopLevelClass.HelperClass_PropertyName} = {TopLevelClass.HelperClass_PropertyName.ToLower()};{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}}}{NL}{NL}"
                );

            return String.Concat(NoArgs, FilePathArg, DeserializedXML);
        }

        /// <summary></summary>
        /// <param name="BaseIndentLevel"></param>
        /// <returns></returns>
        protected string GenerateProperties(int BaseIndentLevel)
        {
            List<string> PropertyList = new List<string>();
            PropertyList.Add(TopLevelClass.GetPropertyString(BaseIndentLevel));
            foreach (DiscoveredClass cl in ParsedFile.DiscoveredClasses)
                if (cl != TopLevelClass)
                    if (!cl.ClassName.Contains(TopLevelClass.ClassName))
                        PropertyList.Add(cl.GetPropertyString(BaseIndentLevel));

            string ret = "";
            foreach (string s in PropertyList)
                ret += s + $"{NL}{NL}";

            return ret;

        }

        /// <summary> Generate a Load(string) method to deserialize an XML file into this helper class. </summary>
        /// <returns></returns>
        protected override string GetClassLoaderMethod(int BaseIndentLevel)
        {

            string Comments = GetComment_LoadMethod(BaseIndentLevel);

            string Method = String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}public static {TopLevelClass.ClassName} Load(string FilePath) {{{NL}",
                    $"{VSTools.TabIndent(BaseIndentLevel + 1)}{TopLevelClass.ClassName} retObj = null;{NL}",
                    $"{VSTools.TabIndent(BaseIndentLevel + 1)}try {{{NL}");
            if (IsGeneratingClass)
            {
                Method = String.Concat(Method,
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}using (Stream stream = File.Open(FilePath, FileMode.Open)) {{{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}XmlSerializer serializer = new XmlSerializer(typeof({TopLevelClass.ClassName}));{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}retObj = ({TopLevelClass.ClassName})serializer.Deserialize(stream);{NL}",
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}}}{NL}");
            }
            else if (IsGeneratingDataSet)
            {
                // Must use DataSet.ReadXML to load into the class.
                //throw new NotImplementedException("Testing with DataSets not done yet!");
                Method = String.Concat(Method,
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}using (Stream stream = File.Open(FilePath, FileMode.Open)) {{{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}XmlSerializer serializer = new XmlSerializer(typeof({TopLevelClass.ClassName}));{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}retObj = ({TopLevelClass.ClassName})serializer.Deserialize(stream);{NL}",
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}}}{NL}");
            }
            Method = String.Concat(Method,
                $"{VSTools.TabIndent(BaseIndentLevel + 1)}}} catch (Exception E) {{{NL}",
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}throw new NotImplementedException(\"Catch Statement Not Implemented. See Inner Error.\", E);{NL}",
                    $"{VSTools.TabIndent(BaseIndentLevel + 1)}}}{NL}",
                    $"{VSTools.TabIndent(BaseIndentLevel + 1)}return retObj;{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}}}{NL}{NL}"
                );
            return String.Concat(Comments, Method);
        }

        /// <summary> Generate a Save(string) method to serialize an XML file from this class. </summary>
        /// <returns></returns>
        protected override string GetClassSaverMethod(int BaseIndentLevel)
        {
            string Comments = base.GetComment_SaveMethod(BaseIndentLevel);

            string Method = String.Concat(
                $"{VSTools.TabIndent(BaseIndentLevel)}public void SaveXMLFile(string FilePath) {{{NL}",
                    $"{VSTools.TabIndent(BaseIndentLevel + 1)}try {{{NL}",
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}Directory.CreateDirectory(new FileInfo(FilePath).DirectoryName);{NL}");
            if (IsGeneratingClass)
            {
                Method = String.Concat(Method,
                $"{VSTools.TabIndent(BaseIndentLevel + 2)}using (Stream stream = File.Open(FilePath, FileMode.Create)) {{{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}XmlSerializer serializer = new XmlSerializer(typeof({TopLevelClass.ClassName}));{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}serializer.Serialize(stream, this.{TopLevelClass.HelperClass_PropertyName});{NL}",
                            $"{VSTools.TabIndent(BaseIndentLevel + 3)}stream.Flush();{NL}",
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}}}{NL}");
            }
            else if (IsGeneratingDataSet)
            {
                // Save DataSet to xml
                // Use WriteXml to write the document.
                //OriginalDataSet.WriteXml(xmlFilename);
            }
            Method = String.Concat(Method,
                $"{VSTools.TabIndent(BaseIndentLevel + 1)}}} catch (Exception E) {{{NL}",
                        $"{VSTools.TabIndent(BaseIndentLevel + 2)}throw new NotImplementedException(\"Catch Statement Not Implemented. See Inner Error.\", E);{NL}",
                    $"{VSTools.TabIndent(BaseIndentLevel + 1)}}}{NL}",
                $"{VSTools.TabIndent(BaseIndentLevel)}}}{NL}{NL}"
                );
            return String.Concat(Comments, Method);
        }

        /// <summary>Generate the Class Tree of nested helper classes within this helper class</summary>
        /// <param name="BaseIndentLevel"></param>
        /// <returns></returns>
        //protected override string GenerateClassTree(int BaseIndentLevel) => TopLevelClass.BuildClassTree(BaseIndentLevel);


    }
}
