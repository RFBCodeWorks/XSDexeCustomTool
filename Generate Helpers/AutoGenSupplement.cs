using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XSDCustomToolVSIX.Generate_Helpers
{
    internal abstract class AutoGenSupplement : CodeGenerator_Base
    {

        protected AutoGenSupplement(ParsedFile parsedFile) : base(parsedFile) { }

        #region < Properties >

        /// <summary> Location of the AutoGen_Supplement file on disk. </summary>
        public override FileInfo FileOnDisk => new FileInfo(ParsedFile.xSD_Instance.InputFile.FullName.Replace(".xsd", $"_AutoGenerated_Supplement{ParsedFile.OutputFileExtension}"));

        #endregion </ Properties >

        #region < Abstract Methods >

        /// <summary>
        /// Run this method to create a supplement file for the parial classes XSD.exe generated.
        /// </summary>
        public abstract void Generate();

        #endregion </ Abstract Methods >

        #region < Methods >

        /// <summary>Generates the comment header of the file that says the file was automatically generated and when it will be overwritten.</summary>
        /// <returns>There are 3 Environment.NewLine keys inserted at the end of this comment.</returns>
        protected virtual string GetComment_AutoGen()
        {
            string FileText = "";
            FileText += $"{CommentIndicator}------------------------------------------------------------------------------{NL}";
            FileText += $"{CommentIndicator} <auto-generated>{NL}";
            FileText += $"{CommentIndicator}     This code was generated by XSDCustomTool VisualStudio Extension.{NL}";
            FileText += $"{CommentIndicator}     This file is only generated if it is missing, so it is safe to modify this file as needed.{NL}";
            FileText += $"{CommentIndicator}     If the file is renamed or deleted, then it will be regenerated the next time the custom tool is run.{NL}";
            FileText += $"{CommentIndicator}     The base file contains the Load(string), Save(string) methods, several constructors, {NL}";
            FileText += $"{CommentIndicator}     and several properties to work with the class file generated by XSD.exe.{NL}";
            FileText += $"{CommentIndicator} </auto-generated>{NL}";
            FileText += $"{CommentIndicator}------------------------------------------------------------------------------{NL}";
            FileText += $"{NL}{NL}";
            return FileText;
        }

        protected virtual string GetComment_ShouldSerialize(int IndentLevel)
        {
            string SerComment;
            SerComment = $"{TabLevel(IndentLevel)}{CommentIndicator}{NL}";
            SerComment += $"{TabLevel(IndentLevel)}{CommentIndicator} ShouldSerialize is run  by the XML Serializer against properties to determine whether to write them to disk.{NL}";
            SerComment += $"{TabLevel(IndentLevel)}{CommentIndicator} The Default functionality (without this method) is to only serialize if the value is changed from the default.{NL}";
            SerComment += $"{TabLevel(IndentLevel)}{CommentIndicator} These methods override that functionality, allowing the programmer to decide when they are serialized.{NL}";
            SerComment += $"{TabLevel(IndentLevel)}{CommentIndicator} To restore original functionality (allowing Serializer to decide for each parameter), comment out these methods.{NL}";
            SerComment += $"{TabLevel(IndentLevel)}{CommentIndicator}{NL}{NL}";
            return SerComment;
        }

        #endregion </ Methods >
    }
}
