using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using System.Windows.Forms;

namespace XSDCustomToolVSIX
{
    /// <summary>
    /// Helper Class that loads in the settings to run XSD.exe with. This class is meant to be passed around as the storage unit for the settings. <br/>
    /// ParameterFileHelper.cs contains the stuff related to reading / writing the param files.<br/>
    /// XSDexe.cs contains the stuff related to running the command.
    /// </summary>
    public partial class XSD_Instance : XSDCustomTool_Parameters
    {
        /// <summary>
        /// Create a new instance of ht XSDCustomTool_Parameters using the default options.
        /// </summary>
        private XSD_Instance()
        {
            VSTools.WriteOutputPane("Creating new Parameter File");
            UserDefaultOptions defaultOptions = OptionsProvider.GetUserDefaults();
            this.XSDexeOptions = new XSDCustomTool_ParametersXSDexeOptions();
            this.XSDexeOptions.ClassOptions = new XSDCustomTool_ParametersXSDexeOptionsClassOptions();
            this.XSDexeOptions.DataSetOptions = new XSDCustomTool_ParametersXSDexeOptionsDataSetOptions();
            this.HelperClassOptions = new XSDCustomTool_ParametersHelperClassOptions();
            //set defaults
            this.XSDexeOptions.Language = GetProjectLanguage();
            this.XSDexeOptions.NameSpace = defaultOptions.DefaultNameSpace;
            this.XSDexeOptions.NoLogo = defaultOptions.SuppressBanner;
            this.XSDexeOptions.GenerateClass = defaultOptions.GenerateWhat == Enums.Generate.CLASSES;
            this.XSDexeOptions.ClassOptions.EnableDataBinding = defaultOptions.EnableDataBinding;
            this.XSDexeOptions.ClassOptions.Order = defaultOptions.Order;
            this.XSDexeOptions.ClassOptions.PropertiesInsteadOfFields = !defaultOptions.GenerateFieldsInsteadOfProperties;
            this.XSDexeOptions.DataSetOptions.EnableLinqDataSet = defaultOptions.EnableLinqDataSet;
            this.HelperClassOptions.GenerateHelperClass = defaultOptions.GenerateHelperClass;
            this.HelperClassOptions.GenerateNestedClasses = false; // defaultOptions.GenerateNestedClasses;
        }

        /// <summary></summary>
        /// <inheritdoc cref="XSDCustomTool.Generate(string, string, string, IntPtr[], out uint, Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)"/>
        public XSD_Instance(string wszInputFilePath, string wszDefaultNamespace = null)
        {
            //Setup the File Paths
            InputFile = new FileInfo(wszInputFilePath); //Set the path and the ParamFile
            ParamFile = new FileInfo(wszInputFilePath.Replace(".xsd", XSDCustomTool.GetDefaultExtension()));

            XSDCustomTool_Parameters tmp;
            if (ParamFile.Exists)
            {
                VSTools.WriteOutputPane("Using Existing Parameter File");
                tmp = Load(ParamFile.FullName);
            }
            else
            {
                tmp = new XSD_Instance();
                tmp.XSDexeOptions.Language = GetProjectLanguage(wszInputFilePath);

            }
            //Point to the new reference.
            this.XSDexeOptions = tmp.XSDexeOptions;
            this.ElementsToGenerateCodeFor = tmp.ElementsToGenerateCodeFor ?? new string[] { };
            this.HelperClassOptions = tmp.HelperClassOptions;
            //Setup the other items
            this.XSDexeOptions.NameSpace = wszDefaultNamespace ?? tmp.XSDexeOptions.NameSpace;
            //Setup the Output Paths
            OutputFile = new FileInfo(wszInputFilePath.Replace(".xsd", $"_AutoGenerated{GetOutputExtension()}"));
            string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            tmpInputFile = new FileInfo(Path.Combine(localAppData, InputFile.Name.Replace(".xsd", $"_{DateTime.Now.TimeOfDay.TotalSeconds.ToString().Replace(".", "")}.xsd"))); // Append a random string of numbers to the end of the filename to ensure it doesn't step on another file in the temp folder
            tmpOutputFile = new FileInfo(tmpInputFile.FullName.Replace(".xsd", OutputFile.Extension));
        }

        #region < Class Properties >

        /// <summary> This is the source XSD file to run the generator against. </summary>
        public FileInfo InputFile { get; private set; }

        /// <summary> Location on disk to save the generated parameter file. </summary>
        public FileInfo ParamFile { get; private set; }

        /// <summary> Location on disk to of the file output by XSD.exe. </summary>
        public FileInfo OutputFile { get; private set; }

        /// <summary> Temporary Input File -> Used to ensure that this doesn't step on other proceses by storing it in %LocalAppData% <br/>
        /// This file is not actually generated until the Run() command is used. </summary>
        private FileInfo tmpInputFile { get; }

        /// <summary> Temporary Input File -> Used to ensure that this doesn't step on other proceses by storing it in %LocalAppData%. <br/>
        /// This file is not actually generated until the Run() command is used. </summary>
        private FileInfo tmpOutputFile { get; }

        /// <summary> Specify the URI for the elements in the schema to generate code for. This URI, if present, applies to all elements specified within the <paramref name="ElementList"/></summary>
        public string URI { get; set; } = "";

        /// <summary> Folder to store the output file into. XSD.exe defaults to same folder as InputFile </summary>
        public string OutputDirectory { get; set; } = "";

        public bool IsGeneratingClass => this.XSDexeOptions.GenerateClass;
        public bool IsGeneratingDataSet => !this.XSDexeOptions.GenerateClass;

        #endregion </ Class Properties >

        /// <summary>Converts the SupportedLanguages enum to the appropriate string to pass into XSD.exe</summary>
        public string GetOutputExtension() {
            switch (this.XSDexeOptions.Language)
            {
                case XSDCustomTool_ParametersXSDexeOptionsLanguage.CS: return ".cs";
                case XSDCustomTool_ParametersXSDexeOptionsLanguage.VB: return ".vb";
                case XSDCustomTool_ParametersXSDexeOptionsLanguage.JS: return ".js";
                case XSDCustomTool_ParametersXSDexeOptionsLanguage.VJS: return ".vjl";
                default: return ".cs";
            }
        }

        /// <inheritdoc cref="VSTools.GetProjectLanguage(string)" />
        public static XSDCustomTool_ParametersXSDexeOptionsLanguage GetProjectLanguage(string wszInputFilePath) => Enums.LanguageEnumToEnum(VSTools.GetProjectLanguage(wszInputFilePath));

        /// <summary>Gets the default project language</summary>
        /// <returns></returns>
        public static XSDCustomTool_ParametersXSDexeOptionsLanguage GetProjectLanguage() => Enums.LanguageEnumToEnum(VSTools.GetActiveProjectLanguage());        

        /// <summary>
        /// Load a file path and produce a Deserialized (opened) <typeparamref name="XmlClass"/> Object
        /// </summary>
        /// <typeparam name="XmlClass">This is the Class to generate from the XML file. This should be based off a class created from an XSD file. ( Ex: MiscBak_AutoGenClass.cs )</typeparam>
        /// <param name="FilePath"> This XML file to read into the class object </param>
        /// <returns> A new <typeparamref name="XmlClass"/> object </returns>
        public static XSDCustomTool_Parameters Load(string FilePath)
        {

            XSDCustomTool_Parameters retObj = null;
            try
            {
                ////Validate the file
                //XDocument tmp = Load(FilePath, XSD, out bool IsValid);
                //tmp = null;

                ////Load into the object
                //if (IsValid)
                //{

                using (Stream stream = File.Open(FilePath, FileMode.Open))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(XSDCustomTool_Parameters));
                    retObj = (XSDCustomTool_Parameters)serializer.Deserialize(stream);
                }
                //}
            }
            catch (Exception E)
            {
                throw E;
            }
            return retObj;
        }

        /// <summary>
        /// Serialize this object and save it to the <see cref="ParamFile"/>
        /// </summary>
        public void SaveXMLFile()
        {
            try
            {
                SaveXMLToPath(ParamFile.FullName);
                VSTools.AddFileToProject(InputFile, ParamFile);
            }
            catch (Exception E)
            {
                throw E;
            }
        }

        /// <summary>
        /// Save the Parameter File to Some Path
        /// </summary>
        /// <param name="Path">Fully Qualified path to save to</param>
        public void SaveXMLToPath(string Path)
        {
            try
            {
                //VSTools.WriteOutputPane("Saving Parameter File");
                Directory.CreateDirectory(ParamFile.DirectoryName);
                using (Stream stream = File.Open(Path, FileMode.Create))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(XSDCustomTool_Parameters));
                    XSDCustomTool_Parameters tmp = new XSDCustomTool_Parameters();
                    tmp.ElementsToGenerateCodeFor = this.ElementsToGenerateCodeFor;
                    tmp.XSDexeOptions = this.XSDexeOptions;
                    serializer.Serialize(stream, tmp);
                    stream.Flush();
                }
            }
            catch (Exception E)
            {
                throw E;
            }
        }

    }
}
