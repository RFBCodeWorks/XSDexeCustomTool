//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. --> DO NOT REGENERATE!
// </auto-generated>
//------------------------------------------------------------------------------
//https://stackoverflow.com/questions/7385921/how-to-write-a-comment-to-an-xml-file-when-using-the-xmlserializer

using System.Xml.Serialization;
using System.Xml;
using System.Xml.Schema;

// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
public partial class XSDCustomTool_Parameters {

    #region < XML COMMENTS >

    [XmlAnyElement("AutoGeneratedComment")]
    public XmlComment AutoGeneratedComment
    {
        get => new XmlDocument().CreateComment("This Parameter File is autogenerated. Customize this file to modify how XSDCustomTool processes the associated .XSD file");
        set { }
    }

    [XmlAnyElement("NameSpaceComment")]
    public XmlComment NameSpaceComment
    {
        get => new XmlDocument().CreateComment("NameSpace: To customize this value, set the NameSpace property of the XSD file in the solution explorer.");
        set { }
    }

    [XmlAnyElement("LanguageComment")]
    public XmlComment LanguageComment
    {
        get => new XmlDocument().CreateComment("Language: Specify the output language. CS = C# (default), JS = JavaScript, VJS = J#, VB = Visual Basic"); 
        set { }
    }

    [XmlAnyElement("NoLogoComment")]
    public XmlComment NoLogoComment
    {
        get => new XmlDocument().CreateComment("NoLogo: Set false to disable writing the comment at the top of the generated file."); 
        set { }
    }

    [XmlAnyElement("GenerateClassComment")]
    public XmlComment GenerateClassComment
    {
        get => new XmlDocument().CreateComment("GenerateClass: True = Generate a Class. False = Generate DataSet."); 
        set { }
    }

    #endregion </ XML COMMENTS >

    /// <remarks/>
    [System.Xml.Serialization.XmlElement("XSDexeOptions")]
    public XSDCustomTool_ParametersXSDexeOptions XSDexeOptions { get; set; }

    #region < XML COMMENTS >

    //[XmlAnyElement("HelperClassComment")]
    //public XmlComment HelperClassComment
    //{
    //    get => new XmlDocument().CreateComment("HelperClassOptions: These options control the generation of the helper class, which is created by parsing the output of XSD.exe.");
    //    set { }
    //}

    ////[XmlAnyElement("GenerateNestedClassesComment")]
    ////public XmlComment GenerateNestedClassesComment
    ////{
    ////    get => new XmlDocument().CreateComment("GenerateNestedClasses: Experimental feature!! When set true, this will loop through all discovered classes found in the XSD.exe output file and generate nested classes within the helper class.");
    ////    set { }
    ////}

    //[XmlAnyElement("GenerateHelperClassComment")]
    //public XmlComment GenerateHelperClassComment
    //{
    //    get => new XmlDocument().CreateComment("GenerateHelperClass: The tool only generates the helper class file if it is missing. If set to false, the tool will skip generating the file if it is missing.");
    //    set { }
    //}

    #endregion </ XML COMMENTS >

    /// <remarks>This class for some forsaken reason is refusing to serialize. So I'm just gonna disable the comments until thats figured out.</remarks>
    [System.Xml.Serialization.XmlElement("HelperClassOptions")]
    public XSDCustomTool_ParametersHelperClassOptions HelperClassOptions { get; set; }

    #region < XML COMMENTS >

    [XmlAnyElement("ElementsToGenerateCodeForComment")]
    public XmlComment ElementsToGenerateCodeForComment
    {
        get => new XmlDocument().CreateComment("ElementsToGenerateCodeFor: Specify the list of elements to generate code for here. If none are specified, all elements will be used.");
        set { }
    }

    [XmlAnyElement("ElementsToGenerateCodeForComment2")]
    public XmlComment ElementsToGenerateCodeForComment2
    {
        get => new XmlDocument().CreateComment("The proper syntax is: <ElementsToGenerateCodeFor><element>ElementName1</element><element>ElementName2</element></ElementsToGenerateCodeFor>");
        set { }
    }

    #endregion </ XML COMMENTS >

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Element", IsNullable=false)]
    public string[] ElementsToGenerateCodeFor { get; set; }

}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class XSDCustomTool_ParametersXSDexeOptions {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public string NameSpace { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public XSDCustomTool_ParametersXSDexeOptionsLanguage Language { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool NoLogo { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool GenerateClass { get; set; }

    #region < XML COMMENTS >

    [XmlAnyElement("PropertiesInsteadOfFieldsComment")]
    public XmlComment PropertiesInsteadOfFieldsComment
    {
        get => new XmlDocument().CreateComment("PropertiesInsteadOfFields: Generated class will have public properties. Set 'false' to have public fields instead.");
        set { }
    }

    [XmlAnyElement("EnableDataBindingComment")]
    public XmlComment EnableDataBindingComment
    {
        get => new XmlDocument().CreateComment("EnableDataBinding: Implement the INotifyPropertyChanged interface.");
        set { }
    }

    [XmlAnyElement("OrderComment")]
    public XmlComment OrderComment
    {
        get => new XmlDocument().CreateComment("Order: Generate order qualifiers on the properties / fields.");
        set { }
    }

    #endregion </ XML COMMENTS >

    /// <remarks/>
    public XSDCustomTool_ParametersXSDexeOptionsClassOptions ClassOptions { get; set; }

    #region < XML COMMENTS >

    [XmlAnyElement("EnableLinqDataSetComment")]
    public XmlComment EnableLinqDataSetComment
    {
        get => new XmlDocument().CreateComment("EnableLinqDataSet: Specifies that the generated DataSet can be queried against using LINQ to DataSet.");
        set { }
    }

    #endregion </ XML COMMENTS >

    /// <remarks/>
    public XSDCustomTool_ParametersXSDexeOptionsDataSetOptions DataSetOptions { get; set; }

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool NameSpaceSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool LanguageSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool NoLogoSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool GenerateClassSpecified => true;

}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public enum XSDCustomTool_ParametersXSDexeOptionsLanguage {
    
    /// <remarks/>
    CS,
    
    /// <remarks/>
    VB,
    
    /// <remarks/>
    JS,
    
    /// <remarks/>
    VJS,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class XSDCustomTool_ParametersXSDexeOptionsClassOptions {

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool PropertiesInsteadOfFields { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool Order { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool EnableDataBinding { get; set; }

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool EnableDataBindingSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool PropertiesInsteadOfFieldsSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool OrderSpecified => true;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class XSDCustomTool_ParametersXSDexeOptionsDataSetOptions {

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool EnableLinqDataSet { get; set; }

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool EnableLinqDataSetSpecified => true;
}


/// <remarks>For some reason this class is not serializing. Whatever, not really important at the moment.</remarks>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class XSDCustomTool_ParametersHelperClassOptions {

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool GenerateHelperClass { get; set; } = true;

    /// <remarks/>
    ///[System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool GenerateNestedClasses { get; set; } = false;

    public bool GenerateHelperIfMissing { get; set; }

    /*
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)] 
    public bool RegenerateHelperClass { get; set; }
    */

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool GenerateHelperClassSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool GenerateNestedClassesSpecified { get; set; }
}

