//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. --> DO NOT REGENERATE!
// </auto-generated>
//------------------------------------------------------------------------------
//https://stackoverflow.com/questions/7385921/how-to-write-a-comment-to-an-xml-file-when-using-the-xmlserializer

using System.Xml.Serialization;
using System.Xml;
using System.Xml.Schema;

// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
[System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
public partial class XSDCustomTool_Parameters {

    #region < Readme Header >

    [XmlAnyElement("AutoGeneratedComment")]
    public XmlComment ReadMe
    {
        get => new XmlDocument().CreateComment(string.Concat(
            $"{System.Environment.NewLine}\tThis XML file is meant to act as a help guide for working with the XSDCustomTool extension.{System.Environment.NewLine}{System.Environment.NewLine}",
            $"\tFiles output by the CustomTool:{System.Environment.NewLine}",
            $"\t- [InputFileName]_Parameters.xml < This is the parameter file that gets fed into XSD.exe when generating the output class.>{System.Environment.NewLine}",
            $"\t- [InputFileName]_AutoGenerated.[languageExtension] -  This is the file output by XSD.exe and is regenerated every time the xsd file is saved.  <Example> InputFile_AutoGenerated.cs</Example>{System.Environment.NewLine}",
            $"\t- [InputFileName]_HelperClass.[languageExtension] - Helper File that is meant to be a wrapper for the class generated by XSD.exe  <Example> InputFile_HelperClass.cs</Example>{System.Environment.NewLine}",
            $"\t- [InputFileName]_AutoGenerated_Supplement.[languageExtension] - Helper file to make changes to the  autogenerated classes that persist between regenerations.  <Example> InputFile_HelperClass.cs</Example>{System.Environment.NewLine}",
            $"{System.Environment.NewLine}",
            $"\t_HelperClass and _AutoGenerated_Supplement will  only be generated if they  are missing from disk. This allows any changes made to these to persist even if the xsd file is modified. To regenerate them, delete the re-run the custom tool.{System.Environment.NewLine}",
            $"{System.Environment.NewLine}",
            $"\tThis  '_Parameters.xml' file will be used when the extension runs XSD.exe as a way to pass parameters into the extension to determine how it writes the output class / dataset.{System.Environment.NewLine}",
            $"\tCustomize this file as needed for generating the Class / Dataset you desire.{System.Environment.NewLine}",
            $"{System.Environment.NewLine}" +
            $"\tFor more info, see: https://docs.microsoft.com/en-us/dotnet/standard/serialization/xml-schema-definition-tool-xsd-exe {System.Environment.NewLine}",
            $"{System.Environment.NewLine}" +
            $"\tPlease report any issues here. Help is needed to implement functionality for JS, J#, and VB languages (which are all already supported by XSD.exe).{System.Environment.NewLine}",
            $"\thttps://github.com/RFBomb/XSDexeCustomTool",
            $"{System.Environment.NewLine}{System.Environment.NewLine}",
            $"\tCustomize this file to modify how XSDCustomTool processes the associated .XSD file{System.Environment.NewLine}\t"
            ));
        set { }
    }

    #endregion

    #region < XSDexeOptions >

    private string GenClassHdr=> $"{System.Environment.NewLine}\t XSD.exe - Generic Options:";
    
    private string NameSpaceComment => $"{System.Environment.NewLine}\t\t- NameSpace: To customize this value, set the NameSpace property of the XSD file in the solution explorer.";
      
    private string LanguageComment => $"{System.Environment.NewLine}\t\t- Language: Specify the output language. CS = C# (default), JS = JavaScript, VJS = J#, VB = Visual Basic"; 
  
    private string NoLogoComment => $"{System.Environment.NewLine}\t\t- NoLogo: Set false to disable writing the comment at the top of the generated file.";

    private string GenerateClassComment => $"{System.Environment.NewLine}\t\t- GenerateClass: True = Generate a Class. False = Generate DataSet.";

    [XmlAnyElement("GenerateClassComment")]
    public XmlComment XSDOptionsComment
    {
        get => new XmlDocument().CreateComment($"{GenClassHdr}{NameSpaceComment}{LanguageComment}{NoLogoComment}{GenerateClassComment}{System.Environment.NewLine}\t"); 
        set { }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlElement("XSDexeOptions")]
    public XSDCustomTool_ParametersXSDexeOptions XSDexeOptions { get; set; }

    #endregion </ XML COMMENTS >

    #region < HelperClassOptions >

    private string HelperClassHdr => " HelperClassOptions: These options control the generation of the helper class, which is created by parsing the output of XSD.exe";

    private string GenerateNestedClassesComment => $"{System.Environment.NewLine}\t- GenerateNestedClasses: Experimental feature!! When set true, this will loop through all discovered classes found in the XSD.exe output file and generate nested classes within the helper class."; 
  
    private string GenerateHelperClassComment => $"{System.Environment.NewLine}\t- GenerateHelperClass: The tool only generates the helper class file if it is missing. If set to false, the tool will skip generating the file if it is missing.";

    //[XmlAnyElement("GenerateHelperClassComment")]
    //public XmlComment GenerateHelperClassComment
    //{
    //    get => new XmlDocument().CreateComment("GenerateHelperClass: The tool only generates the helper class file if it is missing. If set to false, the tool will skip generating the file if it is missing.");
    //    set { }
    //}

    /// <remarks>This class for some forsaken reason is refusing to serialize. So I'm just gonna disable the comments until thats figured out.</remarks>
    [System.Xml.Serialization.XmlElement("HelperClassOptions")]
    public XSDCustomTool_ParametersHelperClassOptions HelperClassOptions { get; set; }

    #endregion </ HelperClassOptions >

    #region < ElementsToGenerateCodeFor >

    private string ElementsToGenerateCodeForCommentText => 
        $"{System.Environment.NewLine}\t ElementsToGenerateCodeFor:" +
        $"{System.Environment.NewLine}\t\tSpecify the list of elements to generate code for here. If none are specified, all elements will be used." +
        $"{System.Environment.NewLine}\t\tThe proper syntax is: " +
        $"{System.Environment.NewLine}\t\t<ElementsToGenerateCodeFor>" +
        $"{System.Environment.NewLine}\t\t\t<element>ElementName1</element>" +
        $"{System.Environment.NewLine}\t\t\t<element>ElementName2</element>" +
        $"{System.Environment.NewLine}\t\t</ElementsToGenerateCodeFor>";

    [XmlAnyElement("ElementsToGenerateCodeForComment2")]
    public XmlComment ElementsToGenerateCodeForComment
    {
        get => new XmlDocument().CreateComment($"{ElementsToGenerateCodeForCommentText}{System.Environment.NewLine}\t");
        set { }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItemAttribute("Element", IsNullable=false)]
    public string[] ElementsToGenerateCodeFor { get; set; }
    
    #endregion </ ElementsToGenerateCodeFor >
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class XSDCustomTool_ParametersXSDexeOptions {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public string NameSpace { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public XSDCustomTool_ParametersXSDexeOptionsLanguage Language { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool NoLogo { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool GenerateClass { get; set; }

    #region < ClassOptions >

    private string ClassOptionsCommentHdr => $"{System.Environment.NewLine}\t Class Generation Options:";

    private string OrderComment => $"{System.Environment.NewLine}\t\t- Order: Generate order qualifiers on the properties / fields.";

    private string EnableDataBindingComment => $"{System.Environment.NewLine}\t\t- EnableDataBinding: Implement the INotifyPropertyChanged interface.";

    private string PropertiesInsteadOfFieldsComment => $"{System.Environment.NewLine}\t\t- PropertiesInsteadOfFields: Generated class will have public properties. Set 'false' to have public fields instead.";

    [XmlAnyElement("ClassOptionsComment")]
    public XmlComment ClassOptionsComment
    {
        get => new XmlDocument().CreateComment($"{ClassOptionsCommentHdr}{OrderComment}{EnableDataBindingComment}{PropertiesInsteadOfFieldsComment}{System.Environment.NewLine}\t");
        set { }
    }

    /// <remarks/>
    public XSDCustomTool_ParametersXSDexeOptionsClassOptions ClassOptions { get; set; }

    #endregion </ ClassOptions >

    #region < DataSetOptions >

    private string DataSetOptionsHdr => $"{System.Environment.NewLine}\t DataSet Generation Options:";

    private string EnableLinqDataSetCommentText => $"{System.Environment.NewLine}\t\t- EnableLinqDataSet: Specifies that the generated DataSet can be queried against using LINQ to DataSet.";

    [XmlAnyElement("EnableLinqDataSetComment")]
    public XmlComment EnableLinqDataSetComment
    {
        get => new XmlDocument().CreateComment($"{DataSetOptionsHdr}{EnableLinqDataSetCommentText}\t");
        set { }
    }

    /// <remarks/>
    public XSDCustomTool_ParametersXSDexeOptionsDataSetOptions DataSetOptions { get; set; }

    #endregion </ DataSetOptions >

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool NameSpaceSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool LanguageSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool NoLogoSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool GenerateClassSpecified => true;

}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public enum XSDCustomTool_ParametersXSDexeOptionsLanguage {
    
    /// <remarks/>
    CS,
    
    /// <remarks/>
    VB,
    
    /// <remarks/>
    JS,
    
    /// <remarks/>
    VJS,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class XSDCustomTool_ParametersXSDexeOptionsClassOptions {

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool PropertiesInsteadOfFields { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool Order { get; set; }

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool EnableDataBinding { get; set; }

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool EnableDataBindingSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool PropertiesInsteadOfFieldsSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool OrderSpecified => true;
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
public partial class XSDCustomTool_ParametersXSDexeOptionsDataSetOptions {

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool EnableLinqDataSet { get; set; }

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool EnableLinqDataSetSpecified => true;
}


/// <remarks>For some reason this class is not serializing. Whatever, not really important at the moment.</remarks>
[System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
public partial class XSDCustomTool_ParametersHelperClassOptions {

    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool GenerateHelperClass { get; set; } = true;

    /// <remarks/>
    ///[System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
    public bool GenerateNestedClasses { get; set; } = false;

    public bool GenerateHelperIfMissing { get; set; }

    /*
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified)] 
    public bool RegenerateHelperClass { get; set; }
    */

    /// <remarks> Always write out these attributes </remarks>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool GenerateHelperClassSpecified => true;

    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool GenerateNestedClassesSpecified { get; set; }
}

